---
title: "Unit 4 - Repeating and finishing a project"
author: "Clara Himmelbauer"
format: pdf
editor: visual
bibliography: references.bib
---

## General overview

### What is Quarto?

Quarto enables you to write code and text "as one". It is the Posit (the company behind RStudio) version of Jupyter Notebooks, which became popular for python in recent years.

### How does it work?

Quarto has a source and a visual editor. We will be mostly working in the visual editor. If you go directly to the source, you will see that the underlying "language" is Markdown - a typography language used a lot in programming and text designing. You can do everything with the buttons in the menu above, but you might still learn the most basic markdown shortcuts, e.g. for inserting code or making headings.

To render your document, click the `Render` button above. You might want to change your settings to render inside the RStudio viewer beforehand.

If you want to run only the code Chunks go to Run and "Run all" or press `Ctrl`+ `Alt` + `Enter` on Windows (and some equivalent on Mac).

### Resources

There are numerous markdown guides and cheatsheets available, for example [this one](https://www.datacamp.com/cheat-sheet/markdown-cheat-sheet-23). The general guide for Quarto can be found [here](https://quarto.org/docs/guide/) on [quarto.org](https://quarto.org/).

## Preparation

### YAML code at the top

The Code chunk at the top is called "YAML", it specifies some of the metadata used throughout the document. Here, you can also change the type of your document output. For working, `HTML` is suggested. You can always change it to pdf later when exporting the document.

### Packages

At first, we need to attach packages. Besides the usual `tidyverse` package, we also need `rmarkdown` for this.

Another thing: Whenever you start a code chunk, you can give it some options using `#|`. An overviewo of execution options can be found [here](https://quarto.org/docs/computations/execution-options.html).

```{r}
#| label: attach-packages
#| output: false
#| warning: false
#| message: false
#| error: false

# install.packages("rmarkdown")
library("rmarkdown")
library("tidyverse")
library("ggplot2")
library("stargazer")
```

### Data

Next, we need to import the data. We are going to use the same data as previous weeks - the SILC-Data.

Before we do that we must however take care where our qmd file is located and saved, using the `getwd()` command. Then we have multiple options to deal with that. The easiest one is to re-define the path we are working at. Make sure, that you change this path whenever you are working on another PC.

```{r}
#| label: data-load

getwd()
# parent_path <- c("C:/Users/chimmelb/OneDrive - WU Wien/Dokumente/Flinta-R-Tut-Summer25")
parent_path <- c("C:/Users/clara/Documents/R/Flinta-R-Tut-Summer25")

hh <- readRDS(paste0(parent_path, "/", "data/silc_hh_new.RDS"))
ind <- readRDS(paste0(parent_path, "/", "data/silc_indiv_new.RDS"))
all <- readRDS(paste0(parent_path, "/", "data/silc_all.RDS"))
```

We might also want to look at our data, so let's do this. `glimpse` and `str` both are nice ways to look at data.

```{r}
#| label: data-inspect

glimpse(hh)
str(ind)
```

## Recap: dplyr and ggplot

We're going to make a simple plot: In 2008, mean equivalized household income by country and degree of urbanization.

### Data wrangling

```{r}
#| message: false
#| warning: false

df <- hh %>% 
  filter(year == 2008) %>% 
  group_by(country, degurba) %>% 
  summarise(heqinc = weighted.mean(heqinc, hweight))
```

### Table

Let's render the table first.

There are numerous ways to make nice tables. For presentation you might look in to `kable()`, `kableExtra`, and `gt`. Furthermore, you might want to export tables to LaTeX. Here, `stargazer` is the typical option. Don't forget to install and attach the packages above though.

```{r}
#| label: tbl-degurba-heqinc
#| tbl-cap: Mean equivalized household income by country and Degree of Urbanization.

knitr::kable(df)
```

### Plot

Now we make a nice barchart. Before we do that, however, let's make an internal link: The data used for the following plot is already displayed in @tbl-degurba-heqinc.

Also, our degurba variable is still a numeric (integer). So let's recode it to a factor.

In the following code chunk, I use the option `#| echo: false`. It prevents the R-code from being shown and in the resulting document, only the ggplot is included. If you want this settings to apply to the whole document, you can include it at the YAML code chunk at the top of the quarto document.

```{r}
#| label: fig-degurba-heqinc
#| fig-cap: Mean equivalized household income by country and DEGURBA.
#| echo: false

df$degurba2 <- factor(df$degurba,
                      levels = 1:3,
                      labels = c("urban", "intermediary", "rural"))

plot <- ggplot(df, aes(x = degurba2, y = heqinc, fill = degurba2)) +
  geom_bar(position = "dodge", stat = "identity") +
  facet_wrap(~country) +
  
  scale_fill_manual(breaks = c("urban", "intermediary", "rural"),
                    values = c("#09283CFF", "#3CC8C0FF", "#F2EBBBFF"),
                    name = "Degree of Urbanization") +
  scale_y_continuous(labels = scales::label_number(big.mark = ".", decimal.mark = ",")) +
  
  theme_minimal() +
  xlab("Degree of urbanization") +
  ylab("Household equivalized income") +
  theme(axis.text.x = element_blank())

plot
```

## Practice time

So now it's time for you to practice. Make a plot, where you have income on the y axis, and employment hours on the x axis. There should be 3 different lines, one for each country. The year we are doing this for is 2013.

```{r}
#| echo: false
#| label: fig-employment-income
#| fig-cap: Income by employment hours, 2013.
#| warning: false
#| message: false

dfx <- ind %>% 
  filter(!is.na(workinghours), year == 2013)

ggplot(dfx, aes(x = workinghours, y = gross_income, color = country)) +
  # geom_point() +
  geom_smooth(se = F) +
  
  scale_color_manual(breaks = c("AT", "DE", "IT"),
                     labels = c("Austria", "Germany", "Italy"),
                     values = c("#09283CFF", "#3CC8C0FF", "#F2EBBBFF"),
                     name = "Country") +
  scale_y_continuous(labels = scales::label_number(big.mark = ".", decimal.mark = ",")) +
  
    xlim(0, 70) +
  # ylim(0, 100000) +
  
  theme_minimal() +
  xlab("Weekly working hours") +
  ylab("Gross income")
```

## Export

### Export the data

For exporting data, we usually use `write.csv2` or `saveRDS`.

### Export the plot

You can either manually save a plot or use the `ggsave` function of the ggplot package (if your plot is a ggplot).

The `ggsave` function is a bit complicated, which is because of the dpi argument. It tells you the resolution of your plot. High resolutions (dpi = 300 is standard) is good, but make sure to put in high values for width and hight as well. Also make sure your background is "white".

```{r}
#| warning: false
#| label: export-figure

ggsave(paste0(parent_path, "/outputs/heqinc-degurba.png"),
       plot = plot,
       dpi = 250,
       width = 1440,
       height = 810,
       units = "px",
       bg = "white")

```

### Export a LaTeX table

Sometimes, we want our tables to be further used as a LaTeX code. The typical way to go is by using the `stargazer` package and function.

Don't run this command if you export your Quarto-document into a pdf. That's why it's commented out below.

```{r}
#| label: export-table-in-latex

# stargazer::stargazer(as.data.frame(df), summary = F)

```

I also recommend saving the LaTeX table code as a txt somewhere in your working directory.

```{r}
#| echo: true
#| output: false

stargazer::stargazer(df,
                     type = "latex",
                     out = paste0(parent_path, "/outputs/heqinc-degurba.txt"))

```

## Other useful stuff

### Citations

You can add scientific references and citations for your document. [@eurostat2024] for example is a citation of the 2023 EU-SILC.

If you add a reference, you can see that quarto automatically creates a bibliography file, adds it to the YAML at the beginning, and includes it at the bottom of this document.

### Maths

For Mathematics, LaTeX is the most convenient language. You can insert LaTeX code just like other languages like `python` or `julia`.

For example: household income is the sum of personal income.

$$
Householdincome = /sum_i^n pinc_i
$$

Or, just to use fractions let's add the formula used in schools for estimating percentages.

$$
A = G * /frac{p}{100}
$$

### Rendering as pdf

To render this document not as HTML but in any other format, change the YAML at the top. Typically, you want to work with an html document until you're done. Then, for exporting, you might want to change it to pdf. You might have some trouble rendering due to your latex installation (at least it's often troublesome for me). I mostly use overleaf to write presentations and reports of my research (an online editor for LaTeX).
